name: RPM inst and upd on RHEL-9-arm64

on:
  schedule:
    - cron: '0 12 * * 3'  # Wednesday 15:00 Moscow time (UTC+3)
  workflow_dispatch:

jobs:
  test-install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1

      - name: Create EC2 Instance
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-09373db3d247551a0 \
            --instance-type t4g.medium \
            --key-name demin \
            --security-groups AllPortsOpened \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=rpm-arm64-check}]' \
            --block-device-mappings '[{"DeviceName":"/dev/sda1","Ebs":{"VolumeSize":50,"VolumeType":"gp3"}}]' \
            --query "Instances[0].InstanceId" --output text)
          
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "Waiting for instance to start..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

      - name: Get EC2 Public IP
        run: |
          IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --query "Reservations[].Instances[].PublicIpAddress" --output text)
          echo "EC2 Public IP: $IP"
          echo "EC2_IP=$IP" >> $GITHUB_ENV

      - name: Wait for SSH to be Ready
        run: sleep 180

      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa

      - name: Upgrade RPM packages
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10 ec2-user@${{ env.EC2_IP }} << 'EOF'
          sudo dnf -y clean all
          sudo dnf -y update
          sudo dnf install wget -y
          EOF

      - name: Reboot EC2 Instance
        run: aws ec2 reboot-instances --instance-ids ${{ env.INSTANCE_ID }}

      - name: Wait for instance to reboot
        run: sleep 180

      - name: Install ms-core-fonts
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10 ec2-user@${{ env.EC2_IP }} << 'EOF'
          sudo dnf install -y cabextract
          wget https://downloads.sourceforge.net/corefonts/mscorefonts-2.0-1.noarch.rpm
          sudo dnf install -y mscorefonts-2.0-1.noarch.rpm
          rm mscorefonts-2.0-1.noarch.rpm
          EOF

      - name: Install ONLYOFFICE-EE CURRENT RELEASE and run test example
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10 ec2-user@${{ env.EC2_IP }} << 'EOF'
          wget https://download.onlyoffice.com/docs/docs-enterprise-install.sh
          printf "n\n" | sudo bash docs-enterprise-install.sh
          printf 'localhost\nonlyoffice\nonlyoffice\nonlyoffice\nlocalhost\nlocalhost\nguest\nguest\n' | sudo documentserver-configure.sh --wopienabled true
          sudo systemctl restart ds-converter ds-docservice ds-example
          EOF

      - name: Update ONLYOFFICE-EE to the NEXT RELEASE and run test example
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10 ec2-user@${{ env.EC2_IP }} << 'EOF'
          sudo dnf config-manager --add-repo https://s3.eu-west-1.amazonaws.com/repo-doc-onlyoffice-com/repo/centos/onlyoffice-dev-${{ vars.ONLYOFFICE_UPDATE_VERSION }}.repo
          sudo dnf update onlyoffice-documentserver-ee${{ vars.ONLYOFFICE_RPM_VERSION }} -y
          sudo systemctl restart ds-converter ds-docservice ds-example
          EOF




#=========================================================================

      - name: Delete EC2 Instance
        run: |
          aws ec2 terminate-instances --instance-ids ${{ env.INSTANCE_ID }}
          aws ec2 wait instance-terminated --instance-ids ${{ env.INSTANCE_ID }}
