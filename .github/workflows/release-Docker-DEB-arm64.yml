name: release Docker DEB arm64

on:
  workflow_dispatch:

jobs:
  check-docker-deb-arm64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set up nodejs
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install prerequisites for puppeteer tests
        run: |
          sudo apt-get update
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb
          sudo apt-get install -f -y
          google-chrome --version
          python3 --version
          pip3 --version
          node -v
          npm -v

          mkdir -p ~/.ssh
          echo "${{ secrets.GIT_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan git.onlyoffice.com >> ~/.ssh/known_hosts
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git clone git@git.onlyoffice.com:ONLYOFFICE-QA/Dep.Tests.git
          cd Dep.Tests
          sed -i 's/url=https:\/\/github.com\/ONLYOFFICE-data\/pp-files.git/url = git@github.com:ONLYOFFICE-data\/pp-files.git/' .gitmodules
          git submodule update --init puppeteer/files
          cd puppeteer/engine
          npm install
          cp ../config_chrome_linux.json ../config_chrome_linux.json.bak

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1

      - name: Create EC2 Instance
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-026fccd88446aa0bf \
            --instance-type t4g.medium \
            --key-name demin \
            --security-groups AllPortsOpened \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=deb-docker-arm64}]' \
            --block-device-mappings '[{"DeviceName":"/dev/sda1","Ebs":{"VolumeSize":50,"VolumeType":"gp3"}}]' \
            --query "Instances[0].InstanceId" --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "Waiting for instance to start..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

      - name: Get EC2 Public IP
        run: |
          IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --query "Reservations[].Instances[].PublicIpAddress" --output text)
          echo "EC2 Public IP: $IP"
          echo "EC2_IP=$IP" >> $GITHUB_ENV

      - name: Wait for SSH to be ready
        run: sleep 180

      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa

      - name: Upgrade server and reboot
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ env.EC2_IP }} << EOF
          sudo dnf -y update
          EOF
          aws ec2 reboot-instances --instance-ids ${{ env.INSTANCE_ID }}

      - name: Wait for server reboot
        run: sleep 300

      - name: Install Docker
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ env.EC2_IP }} << 'EOF'
          for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done
          sudo apt-get update
          sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
          sudo docker ps
          sudo docker compose version
          sudo docker --version
          EOF

      - name: Docker run ONLYOFFICE-Docs EE
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ env.EC2_IP }} << 'EOF'
          docker pull onlyoffice/documentserver-ee
          docker run -itd -p 80:80 -e WOPI_ENABLED=true --name ds-ee-release onlyoffice/documentserver-ee
          sleep 90
          docker exec ds-ee-release supervisorctl start all
          EOF

      - name: Info about installed Package, must be ONLYOFFICE-Docs EE
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ env.EC2_IP }}  << 'EOF'
          docker exec ds-ee-release sed -i '70,71 s/^/# /' /etc/nginx/includes/ds-docservice.conf
          docker exec ds-ee-release service nginx restart
          sudo apt-get install jq -y

          echo "Installed packages:"
          echo "-------------------------------------"
          docker exec ds-ee-release bash -c "dpkg -l | grep onlyoffice"
          echo "-------------------------------------"
          echo "api.js from server:"
          echo "-------------------------------------"
          curl -s http://127.0.0.1/web-apps/apps/api/documents/api.js | head -n 10
          echo "-------------------------------------"
          echo "info.json from server(packageType must be 1):"
          echo "-------------------------------------"
          curl -s http://127.0.0.1/info/info.json | jq | grep -i -e buildVersion -e buildNumber -e packageType
          echo "-------------------------------------"
          echo "check WOPI enabled(must be data except 404 Not Found):"
          echo "-------------------------------------"
          output=$(curl -s http://127.0.0.1/hosting/discovery)
          if echo "$output" | grep -q 'value='; then
            echo "$output" | grep -o 'value="[^"]*"' | head -n 5 | cut -c1-100
          else
            echo "$output"
          fi
          echo "-------------------------------------"
          EOF

      - name: Smoke puppeteer API tests ONLYOFFICE-Docs EE
        run: |
          cd Dep.Tests/puppeteer/engine
          sed -i "s#\"url\": \"https://[^/]+/example\"#\"url\": \"http://${{ env.EC2_IP }}/example\"#" ../config_chrome_linux.json
          sed -i 's/"headless": false/"headless": true/' ../config_chrome_linux.json
          cat ../config_chrome_linux.json
          python3 run.py ../tests/desktop/word/smoke/open-close-file-tab.js --disable_animation

      - name: Smoke puppeteer WOPI tests ONLYOFFICE-Docs EE
        run: |
          cd Dep.Tests/puppeteer/engine
          sed -i 's/"provider": *""/"provider": "wopi.js"/' ../config_chrome_linux.json
          sed -i "s#\"url\": \"https://[^/]+/example\"#\"url\": \"http://${{ env.EC2_IP }}/example\"#" ../providers/wopi/config.json
          cat ../config_chrome_linux.json
          cat ../providers/wopi/config.json
          python3 run.py ../tests/desktop/word/smoke/open-close-file-tab.js --disable_animation

      - name: Remove ONLYOFFICE-Docs EE and Install ONLYOFFICE-Docs DE
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ env.EC2_IP }} << 'EOF'
          docker stop ds-ee-release
          docker rm ds-ee-release
          docker rmi onlyoffice/documentserver-ee
          docker pull onlyoffice/documentserver-de
          docker run -itd -p 80:80 -e WOPI_ENABLED=true --name ds-de-release onlyoffice/documentserver-de
          sleep 90
          docker exec ds-de-release supervisorctl start all
          EOF

      - name: Info about installed Package, must be ONLYOFFICE-Docs DE
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ env.EC2_IP }} << 'EOF'
          docker exec ds-de-release sed -i '70,71 s/^/# /' /etc/nginx/includes/ds-docservice.conf
          docker exec ds-de-release service nginx restart

          echo "Installed packages:"
          echo "-------------------------------------"
          docker exec ds-de-release bash -c "dpkg -l | grep onlyoffice"
          echo "-------------------------------------"
          echo "api.js from server:"
          echo "-------------------------------------"
          curl -s http://127.0.0.1/web-apps/apps/api/documents/api.js | head -n 10
          echo "-------------------------------------"
          echo "info.json from server(packageType must be 2):"
          echo "-------------------------------------"
          curl -s http://127.0.0.1/info/info.json | jq | grep -i -e buildVersion -e buildNumber -e packageType
          echo "-------------------------------------"
          echo "check WOPI enabled(must be data except 404 Not Found):"
          echo "-------------------------------------"
          output=$(curl -s http://127.0.0.1/hosting/discovery)
          if echo "$output" | grep -q 'value='; then
            echo "$output" | grep -o 'value="[^"]*"' | head -n 5 | cut -c1-100
          else
            echo "$output"
          fi
          echo "-------------------------------------"
          EOF

      - name: Smoke puppeteer API tests ONLYOFFICE-Docs DE
        run: |
          cd Dep.Tests/puppeteer/engine
          sed -i 's/"provider": *"wopi\.js"/"provider": ""/' ../config_chrome_linux.json
          cat ../config_chrome_linux.json
          python3 run.py ../tests/desktop/word/smoke/open-close-file-tab.js --disable_animation

      - name: Smoke puppeteer WOPI tests ONLYOFFICE-Docs DE
        run: |
          cd Dep.Tests/puppeteer/engine
          sed -i 's/"provider": *""/"provider": "wopi.js"/' ../config_chrome_linux.json
          cat ../config_chrome_linux.json
          python3 run.py ../tests/desktop/word/smoke/open-close-file-tab.js --disable_animation

      - name: Remove ONLYOFFICE-Docs DE and Install ONLYOFFICE-Docs CE
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ env.EC2_IP }} << 'EOF'
          docker stop ds-de-release
          docker rm ds-de-release
          docker rmi onlyoffice/documentserver-de
          docker pull onlyoffice/documentserver
          docker run -itd -p 80:80 -e WOPI_ENABLED=true --name ds-release onlyoffice/documentserver
          sleep 90
          docker exec ds-release bash -c "dpkg -l | grep onlyoffice"
          docker exec ds-release supervisorctl start all
          EOF

      - name: Info about installed Package, must be ONLYOFFICE-Docs CE
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ env.EC2_IP }} << 'EOF'
          docker exec ds-release sed -i '70,71 s/^/# /' /etc/nginx/includes/ds-docservice.conf
          docker exec ds-release service nginx restart

          echo "Installed packages:"
          echo "-------------------------------------"
          docker exec ds-release bash -c "dpkg -l | grep onlyoffice"
          echo "-------------------------------------"
          echo "api.js from server:"
          echo "-------------------------------------"
          curl -s http://127.0.0.1/web-apps/apps/api/documents/api.js | head -n 10
          echo "-------------------------------------"
          echo "info.json from server(packageType must be 0):"
          echo "-------------------------------------"
          curl -s http://127.0.0.1/info/info.json | jq | grep -i -e buildVersion -e buildNumber -e packageType
          echo "-------------------------------------"
          echo "check WOPI enabled(must be data except 404 Not Found):"
          echo "-------------------------------------"
          output=$(curl -s http://127.0.0.1/hosting/discovery)
          if echo "$output" | grep -q 'value='; then
            echo "$output" | grep -o 'value="[^"]*"' | head -n 5 | cut -c1-100
          else
            echo "$output"
          fi
          echo "-------------------------------------"
          EOF

      - name: Smoke puppeteer API tests ONLYOFFICE-Docs CE
        run: |
          cd Dep.Tests/puppeteer/engine
          sed -i 's/"provider": *"wopi\.js"/"provider": ""/' ../config_chrome_linux.json
          cat ../config_chrome_linux.json
          python3 run.py ../tests/desktop/word/smoke/open-close-file-tab.js --disable_animation

      - name: Smoke puppeteer WOPI tests ONLYOFFICE-Docs CE
        run: |
          cd Dep.Tests/puppeteer/engine
          sed -i 's/"provider": *""/"provider": "wopi.js"/' ../config_chrome_linux.json
          cat ../config_chrome_linux.json
          python3 run.py ../tests/desktop/word/smoke/open-close-file-tab.js --disable_animation

      - name: Delete EC2 Instance
        run: |
          aws ec2 terminate-instances --instance-ids ${{ env.INSTANCE_ID }}
          aws ec2 wait instance-terminated --instance-ids ${{ env.INSTANCE_ID }}