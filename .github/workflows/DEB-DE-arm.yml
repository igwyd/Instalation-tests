name: ONLYOFFICE-DE DEB Install on AWS Ubuntu 24.04 arm64

on:
#  schedule:
#    - cron: '0 12 * * 3'  # Wednesday 15:00 Moscow time (UTC+3)
  workflow_dispatch:

jobs:
  test-install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1

      - name: Create EC2 Instance
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0a7a4e87939439934 \
            --instance-type t4g.medium \
            --key-name demin \
            --security-groups AllPortsOpened \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=onlyoffice-de-deb-check}]' \
            --block-device-mappings '[{"DeviceName":"/dev/sda1","Ebs":{"VolumeSize":50,"VolumeType":"gp3"}}]' \
            --query "Instances[0].InstanceId" --output text)
          
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "Waiting for instance to start..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

      - name: Get EC2 Public IP
        run: |
          IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --query "Reservations[].Instances[].PublicIpAddress" --output text)
          echo "EC2 Public IP: $IP"
          echo "EC2_IP=$IP" >> $GITHUB_ENV

      - name: Wait for SSH to be Ready
        run: sleep 180

      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa

      - name: Install ONLYOFFICE and run test example
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ env.EC2_IP }} << 'EOF'
          sudo apt-get update && sudo apt-get upgrade -y
          wget https://download.onlyoffice.com/docs/docs-developer-install.sh
          echo "deb [trusted=yes] https://s3.eu-west-1.amazonaws.com/repo-doc-onlyoffice-com/repo/debian stable 8.3.2" | sudo tee /etc/apt/sources.list.d/onlyoffice-dev.list
          printf "n\n" | sudo bash docs-developer-install.sh
          sudo systemctl start ds-example
          EOF

      - name: Check Installed ONLYOFFICE Package
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ env.EC2_IP }} << 'EOF'
          sudo dpkg-query -l | grep onlyoffice-documentserver
          EOF

      - name: Install prerequisites for puppeteer tests
        run: |
          sudo apt-get update
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs
          sudo apt-get install -y python3 python3-pip
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb
          sudo apt-get install -f -y
          google-chrome --version
          python3 --version
          pip3 --version
          node -v
          npm -v

          echo "${{ secrets.GIT_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan git.onlyoffice.com >> ~/.ssh/known_hosts
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git clone git@git.onlyoffice.com:ONLYOFFICE-QA/Dep.Tests.git
          cd Dep.Tests
          sed -i 's/url=https:\/\/github.com\/ONLYOFFICE-data\/pp-files.git/url = git@github.com:ONLYOFFICE-data\/pp-files.git/' .gitmodules
          git submodule update --init puppeteer/files
          sed -i "s#\"url\": \"https://kim.teamlab.info/example\"#\"url\": \"http://${{ env.EC2_IP }}/example\"#" puppeteer/config_chrome_linux.json
          sed -i 's/"headless": false/"headless": true/' puppeteer/config_chrome_linux.json
          cd puppeteer/engine
          npm install
          cat ../config_chrome_linux.json

      - name: Smoke puppeteer test
        run: |
          cd Dep.Tests/puppeteer/engine
          python3 run.py --prcache
          python3 run.py ../tests/desktop/word/smoke/open-close-file-tab.js 2>&1 | grep -v "Running test file"
          python3 run.py ../tests/desktop/cell/smoke/smoke_test_spreadsheet.js 2>&1 | grep -v "Running test file"
          python3 run.py ../tests/desktop/pdf/smoke/download-pdf-check-text.js 2>&1 | grep -v "Running test file"

      - name: Delete EC2 Instance
        run: |
          aws ec2 terminate-instances --instance-ids ${{ env.INSTANCE_ID }}
          aws ec2 wait instance-terminated --instance-ids ${{ env.INSTANCE_ID }}
